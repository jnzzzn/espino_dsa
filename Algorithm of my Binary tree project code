//ESPINO JIENZEN B.

A simple algorithm that outlines the behavior of my given Traversal Binary Tree code:

1. Create a class called `Node` with the following attributes:
   - `key`: An integer representing the key of the node.
   - `left`: A reference to the left child node.
   - `right`: A reference to the right child node.
   - Implement a constructor for the `Node` class that initializes the key and sets the left and right references to `null`.

2. Create a class called `Main` with the following attributes:
   - `root`: A reference to the root node of the binary tree.

3. Implement a method in the `Main` class called `inorderTree` that performs an inorder traversal of the binary tree. The method should take a parameter `node` representing the current node being visited.

4. Inside the `inorderTree` method, check if the `node` is not `null`:
   - If `node` is not `null`, perform the following steps recursively:
     - Call `inorderTree` on the left child of the current node.
     - Print the key of the current node.
     - Call `inorderTree` on the right child of the current node.

5. In the `Main` class, implement the `main` method:
   - Create an instance of the `Main` class.
   - Set the `root` of the binary tree by creating new `Node` instances and assigning them as left and right children of the root and its descendants.
   - Print the word "Value".
   - Call the `inorderTree` method on the `root` to perform an inorder traversal of the binary tree.
   
6. In the main method of the Main class:
  -	Create an instance of the Main class called tree.
  -	Initialize the root of the binary tree by creating a new Node instance with a key of 1 and assigning it to tree.root.
  -	Set the left child of the root by creating a new Node instance with a key of 5 and assigning it to tree.root.left.
  -	Set the left child of the left child of the root by creating a new Node instance with a key of 4 and assigning it to tree.root.left.left.
  -	Set the right child of the left child of the root by creating a new Node instance with a key of 3 and assigning it to tree.root.left.right.
  -	Set the right child of the root by creating a new Node instance with a key of 6 and assigning it to tree.root.right.
  -	Set the left child of the right child of the root by creating a new Node instance with a key of 7 and assigning it to tree.root.right.left.
  -	Set the right child of the left child of the right child of the root by creating a new Node instance with a key of 2 and assigning it to tree.root.right.left.right.
  -	Print the word "Value" to indicate the output will follow.
  -	Call the inorderTree method on tree.root to perform an inorder traversal of the binary tree.
  
7.The inorderTree method will recursively traverse the binary tree in inorder fashion and print the keys of the nodes.





